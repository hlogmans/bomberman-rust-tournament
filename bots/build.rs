use std::env;
use std::fs;
use std::io::Write;
use std::path::Path;

fn main() {
    // 1️⃣ Get the OUT_DIR where Cargo will place generated files
    let out_dir = env::var("OUT_DIR").unwrap();
    let bot_registry_path = Path::new(&out_dir).join("bot_registry.rs");

    // 2️⃣ Path to your bot source files
    // Relative to the crate root (Cargo.toml in bots/)
    let bot_dir = Path::new("src/bot");

    // Debug: show where we are scanning
    println!(
        "cargo:warning=Scanning bot directory: {:?}",
        bot_dir.canonicalize().unwrap()
    );

    // 3️⃣ Collect bot modules
    let mut bot_info = Vec::new();
    if let Ok(entries) = fs::read_dir(bot_dir) {
        for entry in entries.flatten() {
            let path = entry.path();
            if let Some(file_name) = path.file_name().and_then(|s| s.to_str()) {
                if file_name.ends_with(".rs") && file_name != "mod.rs" {
                    let module_name = file_name.trim_end_matches(".rs");
                    let struct_name = snake_to_pascal(module_name);
                    bot_info.push((module_name.to_string(), struct_name));
                }
            }
        }
    }

    // Sort for consistency
    bot_info.sort();

    // 4️⃣ Generate Rust code
    let mut generated_code = String::new();
    generated_code.push_str("// Auto-generated by build.rs\n");
    generated_code.push_str("// DO NOT EDIT MANUALLY\n\n");

    // Macro for including modules
    generated_code.push_str("macro_rules! include_bot_modules {\n");
    generated_code.push_str("    () => {\n");
    for (module_name, _) in &bot_info {
        generated_code.push_str(&format!("        #[path = \"bot/{module_name}.rs\"]\n        pub mod {module_name};\n"));
    }
    generated_code.push_str("    };\n}\n\n");

    // available_bots function
    generated_code.push_str("pub fn available_bots() -> Vec<crate::BotConstructor> {\n");
    generated_code.push_str("    vec![\n");
    for (module_name, struct_name) in &bot_info {
        generated_code.push_str(&format!(
            "        Box::new(|| Box::new({}::{}::new())),\n",
            module_name, struct_name
        ));
    }
    generated_code.push_str("    ]\n}\n\n");

    // bot_count
    generated_code.push_str(&format!(
        "pub fn bot_count() -> usize {{ {} }}\n\n",
        bot_info.len()
    ));

    // get_bot_names
    generated_code.push_str("pub fn get_bot_names() -> Vec<String> {\n");
    generated_code.push_str("    vec![\n");
    for (_, struct_name) in &bot_info {
        generated_code.push_str(&format!("        \"{struct_name}\".to_string(),\n"));
    }
    generated_code.push_str("    ]\n}\n");

    // 5️⃣ Write to OUT_DIR
    fs::File::create(&bot_registry_path)
        .unwrap()
        .write_all(generated_code.as_bytes())
        .unwrap();

    // 6️⃣ Tell Cargo to rerun if bots change
    println!("cargo:rerun-if-changed=src/bot");

    // 7️⃣ Debug print
    let bot_names: Vec<String> = bot_info.iter().map(|(_, s)| s.clone()).collect();
    println!(
        "cargo:warning=Auto-discovered {} bots: {}",
        bot_info.len(),
        bot_names.join(", ")
    );
}

// Convert snake_case to PascalCase
fn snake_to_pascal(s: &str) -> String {
    s.split('_')
        .map(|word| {
            let mut chars = word.chars();
            match chars.next() {
                Some(first) => first.to_uppercase().collect::<String>() + chars.as_str(),
                None => String::new(),
            }
        })
        .collect()
}
