use std::env;
use std::fs;
use std::io::Write;
use std::path::Path;

fn main() {
    let out_dir = env::var("OUT_DIR").unwrap();
    let bot_registry_path = Path::new(&out_dir).join("bot_registry.rs");

    // Read all .rs files in src/bot/ directory (excluding mod.rs)
    let bot_dir = Path::new("src/bot");
    let mut bot_info = Vec::new();

    if let Ok(entries) = fs::read_dir(bot_dir) {
        for entry in entries {
            if let Ok(entry) = entry {
                let path = entry.path();
                if let Some(file_name) = path.file_name() {
                    if let Some(file_str) = file_name.to_str() {
                        if file_str.ends_with(".rs") && file_str != "mod.rs" {
                            let module_name = file_str.trim_end_matches(".rs");

                            // Map module names to their correct struct names
                            let struct_name = &snake_to_pascal(module_name);

                            bot_info.push((module_name.to_string(), struct_name.to_string()));
                        }
                    }
                }
            }
        }
    }

    // Sort for consistent output
    bot_info.sort();

    // Generate the complete bot system code
    let mut generated_code = String::new();
    generated_code.push_str("// This file is automatically generated by build.rs\n");
    generated_code.push_str("// DO NOT EDIT MANUALLY!\n");
    generated_code.push_str("// Contains automatic bot module declarations and registration\n\n");

    // Generate macro for automatic module inclusion
    generated_code.push_str("macro_rules! include_bot_modules {\n");
    generated_code.push_str("    () => {\n");

    for (module_name, _) in &bot_info {
        generated_code.push_str(&format!(
            "        #[path = \"{}.rs\"]\n        pub mod {};\n",
            module_name, module_name
        ));
    }

    generated_code.push_str("    };\n");
    generated_code.push_str("}\n\n");

    // Generate the bot registration functions
    generated_code.push_str("pub fn available_bots() -> Vec<BotConstructor> {\n");
    generated_code.push_str("    vec![\n");

    for (module_name, struct_name) in &bot_info {
        generated_code.push_str(&format!(
            "        Box::new(|| Box::new({}::{}::new())),\n",
            module_name, struct_name
        ));
    }

    generated_code.push_str("    ]\n");
    generated_code.push_str("}\n\n");

    // Generate bot count function
    generated_code.push_str(&format!(
        "pub fn bot_count() -> usize {{\n    {}\n}}\n\n",
        bot_info.len()
    ));

    // Generate bot names function
    generated_code.push_str("pub fn get_bot_names() -> Vec<String> {\n");
    generated_code.push_str("    vec![\n");
    for (_, struct_name) in &bot_info {
        generated_code.push_str(&format!("        \"{}\".to_string(),\n", struct_name));
    }
    generated_code.push_str("    ]\n");
    generated_code.push_str("}\n");

    // Write the registry file
    let mut registry_file = fs::File::create(&bot_registry_path).unwrap();
    registry_file.write_all(generated_code.as_bytes()).unwrap();

    // Tell cargo to re-run this build script if the bot directory changes
    println!("cargo:rerun-if-changed=src/bot");

    // Print discovered bots for debugging
    let bot_names: Vec<String> = bot_info
        .iter()
        .map(|(_, struct_name)| struct_name.clone())
        .collect();
    println!(
        "cargo:warning=Auto-discovered {} bots: {}",
        bot_info.len(),
        bot_names.join(", ")
    );

    let module_names: Vec<String> = bot_info
        .iter()
        .map(|(module_name, _)| module_name.clone())
        .collect();
    println!(
        "cargo:warning=Auto-generated modules: {}",
        module_names.join(", ")
    );
}

fn snake_to_pascal(snake_str: &str) -> String {
    snake_str
        .split('_')
        .map(|word| {
            let mut chars = word.chars();
            match chars.next() {
                None => String::new(),
                Some(first) => first.to_uppercase().chain(chars).collect(),
            }
        })
        .collect()
}
